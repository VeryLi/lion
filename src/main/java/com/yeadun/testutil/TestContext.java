package com.yeadun.testutil;import com.yeadun.testutil.product.ProductType;import com.yeadun.testutil.net.HttpClientFactory;import com.yeadun.testutil.product.ProductWorkerGroup;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class TestContext {    private String uri ;    private String excelDirPath;    private String excelName;    private String sheetName;    private String merchCode;    private String key;    private String buidlerName;    private HttpClientFactory factory;    private DefaultClientFactory clientFactory;    private DefaultExcelJob job;    private static final Logger LOG = LoggerFactory.getLogger(TestContext.class);    private ProductWorkerGroup productWorkGroup = new ProductWorkerGroup();    public TestContext(){        this.factory = HttpClientFactory.getFactory();    }    public TestContext setKey(String env) throws Exception{        this.merchCode = Config.MER_CODE;        if("test".equalsIgnoreCase(env)){            this.key = Config.TEST_KEY;        }        else if("product".equalsIgnoreCase(env)){            this.key = Config.PROD_KEY;        }        else{            throw new Exception("秘钥必须为 [test, product]，分别是测试秘钥，生产秘钥。");        }        return this;    }    public TestContext setUrl(String env) throws Exception{        if("test-feature".equalsIgnoreCase(env)){            this.uri = Config.TEST_FEATURE_URL;        }        else if("test-fixbug".equalsIgnoreCase(env)){            this.uri = Config.TEST_FIXBUG_URL;        }        else if("product".equalsIgnoreCase(env)){            this.uri = Config.PROD_URL;        }else{            throw new Exception("测试环境URL必须为 [test-feature, test-fixbug, product]，分别是新功能测试环境，BugFix测试环境，生产环境。");        }        return this;    }    public TestContext setBuilder(String builder){        if("".equals(builder) || builder == null){            this.buidlerName = HttpClientFactory.DEFAULT_BUILDER;            LOG.info("TestContext使用默认default Builder。");        }else{            this.buidlerName = builder;        }        return this;    }    public TestContext setExcel(String excelDirPath, String excelName) throws Exception{        if("".equalsIgnoreCase(excelDirPath) || excelDirPath == null                || "".equalsIgnoreCase(excelName) || excelName == null){            throw new Exception("Excel路径不能为空。");        }        this.excelDirPath = excelDirPath;        this.excelName = excelName;        return this;    }    public TestContext setSheet(String sheetName) throws Exception{        if("".equalsIgnoreCase(sheetName) || sheetName == null){            throw new Exception("Excel的Sheet页名不能为空。");        }        this.sheetName = sheetName;        return this;    }    public TestContext addProductWorker(String prodCode, int[] cols, int[] rows)            throws Exception{        ProductType type = checkProdcutType(prodCode);        if(type == null){            throw new Exception("\"" + prodCode + "\"产品好不存在。");        }        this.productWorkGroup.add(type, this.merchCode, this.key, rows, cols);        return this;    }    public void start(){        this.clientFactory = new DefaultClientFactory(this.factory, this.buidlerName, this.uri);        this.job = new DefaultExcelJob(this.excelDirPath, this.excelName, this.sheetName, this.clientFactory);        this.job.exec(this.productWorkGroup);    }    public DefaultClientFactory getClientFactory() {        return clientFactory;    }    public DefaultExcelJob getJob() {        return job;    }    private ProductType checkProdcutType(String prodCode){        for(ProductType type: ProductType.values()){            if(type.getProdCode().equalsIgnoreCase(prodCode)){                return type;            }        }        return null;    }}