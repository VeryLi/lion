package com.yeadun.testutil.product;import com.yeadun.testutil.BasicFunction;import com.yeadun.testutil.Config;import com.yeadun.testutil.net.HttpClientFactory;import com.yeadun.testutil.util.format.ProductParamFormat;import com.yeadun.testutil.util.format.ProductResponseFormat;import org.apache.http.message.BasicNameValuePair;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.ArrayList;import java.util.HashMap;/** * * */public class ProductWorker extends BasicFunction<HashMap<String, String>, Response> {    private static final Logger LOG = LoggerFactory.getLogger(ProductWorker.class);    private String prodName;    private String prodCode;    private String merchCode;    private String key;    private HttpClientFactory._HttpClient client;    private ProductType type;    public void setMerchCode(String merchCode) {        this.merchCode = merchCode;    }    public void setKey(String key) {        this.key = key;    }    public String getProdName() {        return prodName;    }    public String getProdCode() {        return prodCode;    }    public String getMerchCode() {        return merchCode;    }    public String getKey() {        return key;    }    public ProductType getType() {        return type;    }    public ProductWorker(ProductType type, HttpClientFactory._HttpClient client, String merchCode, String key) {        this.merchCode = merchCode;        this.key = key;        this.client = client;        this.type = type;        this.prodName = this.type.getProdName();        this.prodCode = this.type.getProdCode();    }    @Override    public void prepare() {        if (this.client == null) {            LOG.warn("{} ({})对象中HttpClient为空，选用默认客户端，地址为：{}。",                    this.prodCode, this.prodName, Config.DEFAULT_URL);            this.client = HttpClientFactory                    .getFactory()                    .createHttpClient(HttpClientFactory.DEFAULT_BUILDER, Config.DEFAULT_URL);        }        this.setReady(true);    }    @Override    public Response execute(HashMap<String, String> params) {        ArrayList<BasicNameValuePair> postParams =                ProductParamFormat.formatPostParam(this.prodCode, this.merchCode, this.key, params);        client.setPostParameters(postParams);        printLog(params);        // 发送API接口请求        String strResult = (String) client.sendPOSTReturnStringBody().get(HttpClientFactory.HTTP_BODY);        return ProductResponseFormat.formatReturnJsonStr(strResult);    }    private void printLog(HashMap<String, String> params) {        StringBuilder builder = new StringBuilder();        for (String key : params.keySet()) {            builder.append(key).append(": ").append(params.get(key)).append(", ");        }        int lastComma = builder.toString().lastIndexOf(",");        String res = "[ " + builder.toString().substring(0, lastComma) + " ].";        LOG.info("发送请求 - {}({}) 传入参数为 - {}", this.prodCode, this.prodName, res);    }}