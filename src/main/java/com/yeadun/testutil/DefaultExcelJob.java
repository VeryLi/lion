package com.yeadun.testutil;import com.yeadun.testutil.excel.ExcelTask;import com.yeadun.testutil.excel.ExcelWorker;import com.yeadun.testutil.product.ProductWorker;import com.yeadun.testutil.product.ProductWorkerGroup;import com.yeadun.testutil.product.Response;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class DefaultExcelJob {    private static final Logger LOG = LoggerFactory.getLogger(DefaultExcelJob.class);    private String excelPath;    private String sheetName;    private ExcelWorker<Response> excelWorker;    private DefaultClientFactory factory;    private int taskTotal = 0;    public DefaultExcelJob(String excelPath, String sheetName, DefaultClientFactory factory) {        this.excelPath = excelPath;        this.sheetName = sheetName;        this.factory = factory;        this.excelWorker = new ExcelWorker<>(this.excelPath);    }    public String getExcelPath() {        return excelPath;    }    public String getSheetName() {        return sheetName;    }    public void exec(ProductWorkerGroup group) {        for (ProductWorkerGroup.ProductMeta meta : group.getDataFrame()) {            ProductWorker productWorker = new ProductWorker(meta.getType(), this.factory.getClientInstance(),                    meta.getMerchCode(), meta.getKey());            ExcelTask task = new ExcelTask(this.excelWorker, this.sheetName,                    meta.getRowNums(), meta.getColNums(), productWorker);            LOG.info("启动线程: {}, 执行产品: {}({}) 测试。" +                            "[ meta信息 - sheet页: {}, 测试行数: {}, 选择列号: {}, 测试用户: {}, 测试秘钥: {} ]",                    "ExcelTask_" + taskTotal, meta.getType().getProdCode(), meta.getType().getProdName(),                    this.sheetName, meta.getRowNums().length, meta.getColNums(), meta.getMerchCode(), meta.getKey());            taskTotal++;            Thread thread = new Thread(task, "ExcelTask_" + taskTotal);            thread.start();        }    }}