package com.yeadun.testutil;import com.alibaba.fastjson.JSON;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.*;import java.util.ArrayList;public class TestUtilEntry {    private static final Logger LOG = LoggerFactory.getLogger(TestUtilEntry.class);    private static final String confPath = "config.json";    private static TestContext context;    private static String excelDirPath;    private static String excelName;    private static String sheetName;    private static String builderName;    private static String key;    private static String url;    private static Parameter parameter;    public static void main(String[] args) throws Exception {        File confFile = new File(confPath);        if(!confFile.exists()){            throw new Exception("工具配置文件 config.json 不存在，请将其和工具Jar包放在同一目录下。");        }        context = new TestContext();        parseParameters(confFile);        LOG.info("TestUtil测试工具 - 初始化TestUtil成功，解析传入参数。");        initTestUtil();        LOG.info("TestUtil测试工具 - 参数列表: builder - {}, Key - {}, url - {}, excel path - {}, sheet name - {}.",                builderName, key, url, excelDirPath + excelName, sheetName);        addProductWorkers();        LOG.info("TestUtil测试工具 - 添加完成ProductWorker，开始执行。");        context.start();    }    /** 解析参数     *     * @param confFile 配置文件     * @throws IOException 读取文件时的报错     */    private static void parseParameters(File confFile) throws IOException {        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(confFile)));        StringBuilder builder = new StringBuilder();        String buf ;        while((buf = reader.readLine()) != null){            builder.append(buf);        }        String confJson = builder.toString();        parameter = JSON.parseObject(confJson, Parameter.class);        excelDirPath = parameter.getExcelDirPath();        excelName = parameter.getExcelName();        sheetName = parameter.getSheetName();        builderName = parameter.getBuilderName();        key = parameter.getKey();        url = parameter.getUrl();    }    /** 初始化TestUtilEntry工具     *     * @throws Exception TestContext类中抛出的异常     */    private static void initTestUtil() throws Exception {        context.setBuilder(builderName)                .setKey(key)                .setUrl(url)                .setExcel(excelDirPath, excelName)                .setSheet(sheetName);    }    /** 添加ProductWorkers到测试产品组     *     * @throws Exception TestContext类中抛出的异常     */    private static void addProductWorkers() throws Exception {        ArrayList<ProductParam> params = parameter.getProducts();        for(ProductParam param: params){            LOG.info("TestUtil测试工具 - 添加测试产品 - 产品号：{}，选择列号：{}，测试行数：{}。(null为全部行数或列数)",                    param.getProdCode(), param.getCols(), param.getRows());            context.addProductWorker(param.getProdCode(), param.getCols(), param.getRows());        }        LOG.info("TestUtil测试工具 - 产品测试参数添加完毕。");    }    /**     * TestUtilEntry接收的参数类     * */    static class Parameter {        private String key;        private String url;        private String builderName;        private String excelDirPath;        private String excelName;        private String sheetName;        private ArrayList<ProductParam> products;        public String getKey() {            return key;        }        public void setKey(String key) {            this.key = key;        }        public String getUrl() {            return url;        }        public void setUrl(String url) {            this.url = url;        }        public String getBuilderName() {            return builderName;        }        public void setBuilderName(String builderName) {            this.builderName = builderName;        }        public String getExcelDirPath() {            return excelDirPath;        }        public void setExcelDirPath(String excelDirPath) {            this.excelDirPath = excelDirPath;        }        public String getExcelName() {            return excelName;        }        public void setExcelName(String excelName) {            this.excelName = excelName;        }        public ArrayList<ProductParam> getProducts() {            return products;        }        public void setProducts(ArrayList<ProductParam> products) {            this.products = products;        }        public String getSheetName() {            return sheetName;        }        public void setSheetName(String sheetName) {            this.sheetName = sheetName;        }    }    /**     * TestUtilEntry接受的每个测试产品的测试参数     * */    static class ProductParam {        private String prodCode;        private int[] cols;        private int[] rows;        public String getProdCode() {            return prodCode;        }        public void setProdCode(String prodCode) {            this.prodCode = prodCode;        }        public int[] getCols() {            return cols;        }        public void setCols(int[] cols) {            this.cols = cols;        }        public int[] getRows() {            return rows;        }        public void setRows(int[] rows) {            this.rows = rows;        }    }}