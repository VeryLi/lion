package com.yeadun.testutil.util;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.UnsupportedEncodingException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class EncryptUtil {    private static final Logger LOG = LoggerFactory.getLogger(EncryptUtil.class);    // 全局数组    private static final String[] strDigits = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"};    private static final Object lock = new Object();    private static MessageDigest MD5;    static {        try {            MD5 = MessageDigest.getInstance("MD5");        } catch (NoSuchAlgorithmException e) {            LOG.info(e.getMessage(), e);        }    }    /**     * MD5加密，返回加密后字符串。     *     * @param data 需要加密的数据     * @return 加密后的字符串     */    public static String MD5Encrypt(String data)            throws UnsupportedEncodingException, NoSuchAlgorithmException {        if (MD5 == null) {            throw new NoSuchAlgorithmException();        }        byte[] bytes;        synchronized (lock) {            MD5.update(data.getBytes("UTF-8"));            bytes = MD5.digest();            MD5.reset();        }        StringBuilder builder = new StringBuilder();        for (byte b : bytes) {            int iRet = b;            if (iRet < 0) {                iRet += 256;            }            String str = strDigits[iRet / 16] + strDigits[iRet % 16];            builder.append(str);        }        return builder.toString();    }    /**     * 使用 MD5 签名，返回加密后小写 32 位字符串。     *     * @param data 需要加密的字符串     * @return 返回加密后小写 32 位字符串     * @throws NoSuchAlgorithmException     无此算子异常     * @throws UnsupportedEncodingException 不支持编码类型     */    public static String MD5EncryptReturnLowerCase(String data)            throws UnsupportedEncodingException, NoSuchAlgorithmException {        byte[] bytes;        if (MD5 == null) {            throw new NoSuchAlgorithmException();        }        synchronized (lock) {            MD5.update(data.getBytes("UTF-8"));            bytes = MD5.digest();            MD5.reset();        }        StringBuilder builder = new StringBuilder();        for (byte b : bytes) {            int i = b;            if (i < 0) {                i += 256;            }            if (i < 16) {                builder.append("0");            }            builder.append(Integer.toHexString(i));        }        return builder.toString();// 32位的加密    }}