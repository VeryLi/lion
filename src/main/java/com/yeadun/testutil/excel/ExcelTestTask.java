package com.yeadun.testutil.excel;import com.yeadun.testutil.product.ProductWorker;import com.yeadun.testutil.product.Response;import com.yeadun.testutil.product.model.NullPOJO;import com.yeadun.testutil.product.model.Product;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.HashMap;import java.util.HashSet;import java.util.Set;/** * ExcelTask类，继承Runnable接口。 * 负责启动线程执行具体Excel任务。 * */public class ExcelTestTask implements Runnable {    private static final Logger LOG = LoggerFactory.getLogger(ExcelTestTask.class);    private ExcelWorker<Response> excelWorker;    private String sheetName;    private int[] rowNums;    private int[] colNums;    private ProductWorker productWorker;    // 是否已经设置过表头    private boolean ifSettedHeader = false;    // Yeadun响应的表头    private String[] YeadunHeader = {"orderId", "merchPrivate", "retCode", "retDesc", "retInfo"};    public ExcelTestTask(ExcelWorker<Response> excelWorker,                         String sheetName, int[] rowNums, int[] colNums, ProductWorker productWorker) {        this.excelWorker = excelWorker;        this.sheetName = sheetName;        this.colNums = colNums;        this.rowNums = rowNums;        this.productWorker = productWorker;    }    /**     * 线程中具体执行的方法。     * 本方法主要实现：启动一个线程专门执行excelWorker.execute()方法。     * */    @Override    public void run() {        try {            HashMap<Integer, Response> result =                    this.excelWorker.execute(this.sheetName, this.rowNums, this.colNums, this.productWorker);            // 结果处理            for (Integer num : result.keySet()) {                Response response = result.get(num);                // 日志打印ExcelTask执行结果信息                printLog(num, response);                // 结果写入Excel新的Sheet页中。                writeResultIntoExcel(num, response);            }        } catch (Exception e) {            LOG.error(e.getMessage(), e);        }    }    public String getSheetName() {        return sheetName;    }    public int[] getRowNums() {        return rowNums;    }    public int[] getColNums() {        return colNums;    }    public ProductWorker getProduct() {        return productWorker;    }    /**     * 将数据写入Excel对象中，并存储。     * */    private void writeResultIntoExcel(int rowNum, Response response) {        String prodCode = this.productWorker.getProdCode();        String prodName = this.productWorker.getProdName();        String saveSheetName = prodCode + "(" +prodName + ")";        HashMap<String, String> result = response.getPOJOData(this.productWorker.getType()).pojo2Map();        Product product;        Set<String> productHeaders = new HashSet<>();        try {            product = (Product) Class.forName(this.productWorker.getType().getPOJOClassName()).newInstance();            productHeaders = product.pojo2Map().keySet();        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {            LOG.info(e.getMessage(), e);        }        // 结果sheet页如果没有设置表头，则设置表头        if(!ifSettedHeader){            int pos = 1;            // 添加Yeadun返回结果的表头            for(; pos <= this.YeadunHeader.length;){                this.excelWorker.writeDataIntoCell(saveSheetName, true, true,                        1, pos ,this.YeadunHeader[pos - 1]);                pos++;            }            // 添加POJO对象的字段到表头            for(String header: productHeaders){                this.excelWorker.writeDataIntoCell(saveSheetName, true, true,                        1, pos ,header);                pos++;            }            this.ifSettedHeader = true;            LOG.info("写入 {}({}) 测试结果的表头。", this.productWorker.getProdCode(), this.productWorker.getProdName());        }        // 写入数据        this.excelWorker.writeDataIntoCell(saveSheetName, true, true,                rowNum, 1, response.getOrderId());        this.excelWorker.writeDataIntoCell(saveSheetName, true, true,                rowNum, 2, response.getMerchPrivate());        this.excelWorker.writeDataIntoCell(saveSheetName, true, true,                rowNum, 3, response.getRetCode());        this.excelWorker.writeDataIntoCell(saveSheetName, true, true,                rowNum, 4, response.getRetDesc());        this.excelWorker.writeDataIntoCell(saveSheetName, true, true,                rowNum, 5, response.getRetInfo());        int pos = 6;        // retInfo无数据，POJO为Null类型        if(response.getPOJOData(this.productWorker.getType()) instanceof NullPOJO){            this.excelWorker.writeDataIntoCell(saveSheetName, true, true,                    rowNum, pos, result.get("info"));        }        // retInfo有数据，POJO有数据        else {            for (String header : productHeaders) {                this.excelWorker.writeDataIntoCell(saveSheetName, true, true,                        rowNum, pos, result.get(header));                pos++;            }        }        LOG.info("第 {} 行 - {}({})测试结果 - 已写入 Excel。", rowNum, this.productWorker.getProdCode(), this.productWorker.getProdName());    }    /**     * 日志打印     * */    private void printLog(int num, Response response){        LOG.info("收到结果 - [ Thread name: {}, Sheet: {}, product Code: {}, product Name: {} ]" +                        " - No.{} - orderId: {}, merchPrivate: {}, RetCode: {}, RetDesc: {}, RetInfo: {} - " +                        " POJOData: {}",                Thread.currentThread().getName(), this.sheetName, this.productWorker.getProdCode(), this.productWorker.getProdName(),                num, response.getOrderId(), response.getMerchPrivate(), response.getRetCode(), response.getRetDesc(), response.getRetInfo(),                response.getPOJOData(this.productWorker.getType()).toString());    }}