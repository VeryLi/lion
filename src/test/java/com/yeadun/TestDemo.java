package com.yeadun;import com.lion.testutil.product.ProductType;import com.lion.testutil.product.Response;import com.lion.testutil.product.ProductWorker;import com.lion.testutil.Config;import com.lion.testutil.product.model.NullPOJO;import com.lion.testutil.product.model.*;import com.lion.testutil.util.excel.ExcelWorker;import com.lion.testutil.util.net.HttpClientFactory;import org.apache.http.client.config.RequestConfig;import org.apache.http.message.BasicHeader;import org.junit.Test;import java.util.HashMap;public class TestDemo {    @Test    @SuppressWarnings("unchecked")    public void test() throws Exception {        String builderName = "MyBuilder";        /**         * 获取ClosableHttpClient对象         * */        // 构建HttpClientFactory工厂        HttpClientFactory factory = HttpClientFactory.getFactory();        // 设置Client 请求参数。主要设置超时        RequestConfig config = RequestConfig.custom()                .setConnectTimeout(Config.CONNECT_TIMEOUT)                .setConnectionRequestTimeout(1000)                .setSocketTimeout(5000)                .build();        // 创建并获取需要使用的HttpClientBuilder，并进行属性设置        // 使用获取的HttpClientBuilder创建ClosableHttpClient对象        // 该Builder构建出的HttpClient对象属性都一样，但是是不同实例        factory.createBuilder(builderName);        factory.getBuilder(builderName).setDefaultRequestConfig(config);//        HttpClientFactory._HttpClient client = factory.createHttpClient(builderName, Config.PROD_URL);        HttpClientFactory._HttpClient client = factory.createHttpClient(builderName, Config.TEST_FIXBUG_URL);        /**         * 请求头配置         * */        client.addHeader(new BasicHeader("Content-Type", "application/x-www-form-urlencoded"))                .addHeader(new BasicHeader("charset", "UTF-8"))                .addHeader(new BasicHeader("Accept-Charset", "UTF-8"));        /**         * 获取ExcelWork对象，并传入BasicFunction接口实现类，对读取到的每行数据进行处理。         * */        ExcelWorker<Response> worker = new ExcelWorker<>("/Users/very/文档/联动四要素测试数据.xlsx");        ProductWorker product = new ProductWorker(ProductType.P100006, client, Config.MER_CODE, Config.PROD_KEY);        int[] colNum = {1, 2, 3, 4};        int[] rowNum = {2  ,4  ,20, 17, 22, 3  ,15 ,31 ,32 ,33 ,34 ,35 ,39 ,53 ,54 ,59 ,62 ,67 ,72 ,79 ,89 ,110};        String sheetName = "Sheet1";        HashMap<Integer, Response> _07Result = worker.execute(sheetName, rowNum, colNum, product);        // 打印结果        System.out.println("-----------  ProductWorker --------------");        for (Integer num : _07Result.keySet()) {            Response response = _07Result.get(num);            System.out.println("No.[" + num + "]: MerchPrivate => "                    + response.getMerchPrivate() + ", OrderId => "                    + response.getOrderId() + ", RetCode => "                    + response.getRetCode() + ", RetDesc => "                    + response.getRetDesc() + ", RetInfo => "                    + response.getRetInfo() + ", POJOPData => "                    + response.getPOJOData(ProductType.P100006).toString());            Object obj = response.getPOJOData(ProductType.P100006);            if(obj instanceof NullPOJO){                NullPOJO nullPOJO = (NullPOJO)response.getPOJOData(ProductType.P100006);                System.out.println("NULL - " + nullPOJO.toString());            }else{                P100006 p100006 = (P100006)response.getPOJOData(ProductType.P100006);                System.out.println("BindId - " + p100006.getBindId());            }        }    }}